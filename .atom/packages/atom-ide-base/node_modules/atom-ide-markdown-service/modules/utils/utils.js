const scopesByFenceName = {
    bash: "source.shell",
    sh: "source.shell",
    powershell: "source.powershell",
    ps1: "source.powershell",
    c: "source.c",
    "c++": "source.cpp",
    cpp: "source.cpp",
    coffee: "source.coffee",
    "coffee-script": "source.coffee",
    coffeescript: "source.coffee",
    cs: "source.cs",
    csharp: "source.cs",
    css: "source.css",
    sass: "source.sass",
    scss: "source.css.scss",
    erlang: "source.erl",
    go: "source.go",
    html: "text.html.basic",
    java: "source.java",
    javascript: "source.js",
    js: "source.js",
    json: "source.json",
    less: "source.less",
    mustache: "text.html.mustache",
    objc: "source.objc",
    "objective-c": "source.objc",
    php: "text.html.php",
    py: "source.python",
    python: "source.python",
    rb: "source.ruby",
    ruby: "source.ruby",
    rust: "source.rust",
    text: "text.plain",
    toml: "source.toml",
    ts: "source.ts",
    typescript: "source.ts",
    xml: "text.xml",
    yaml: "source.yaml",
    yml: "source.yaml",
};
export function scopeForFenceName(fenceName) {
    fenceName = fenceName.toLowerCase();
    let result = `source.${fenceName}`;
    if (scopesByFenceName[fenceName] != null) {
        result = scopesByFenceName[fenceName];
    }
    return result;
}
export function fenceNameForScope(scope) {
    scope = scope.toLowerCase();
    const result = Object.keys(scopesByFenceName).filter((s) => s == scope);
    let resultOut;
    if (result.length) {
        resultOut = result[0];
    }
    else {
        resultOut = scope.substr(scope.lastIndexOf(".") + 1);
    }
    return resultOut;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxpQkFBaUIsR0FBRztJQUN4QixJQUFJLEVBQUUsY0FBYztJQUNwQixFQUFFLEVBQUUsY0FBYztJQUNsQixVQUFVLEVBQUUsbUJBQW1CO0lBQy9CLEdBQUcsRUFBRSxtQkFBbUI7SUFDeEIsQ0FBQyxFQUFFLFVBQVU7SUFDYixLQUFLLEVBQUUsWUFBWTtJQUNuQixHQUFHLEVBQUUsWUFBWTtJQUNqQixNQUFNLEVBQUUsZUFBZTtJQUN2QixlQUFlLEVBQUUsZUFBZTtJQUNoQyxZQUFZLEVBQUUsZUFBZTtJQUM3QixFQUFFLEVBQUUsV0FBVztJQUNmLE1BQU0sRUFBRSxXQUFXO0lBQ25CLEdBQUcsRUFBRSxZQUFZO0lBQ2pCLElBQUksRUFBRSxhQUFhO0lBQ25CLElBQUksRUFBRSxpQkFBaUI7SUFDdkIsTUFBTSxFQUFFLFlBQVk7SUFDcEIsRUFBRSxFQUFFLFdBQVc7SUFDZixJQUFJLEVBQUUsaUJBQWlCO0lBQ3ZCLElBQUksRUFBRSxhQUFhO0lBQ25CLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLEVBQUUsRUFBRSxXQUFXO0lBQ2YsSUFBSSxFQUFFLGFBQWE7SUFDbkIsSUFBSSxFQUFFLGFBQWE7SUFDbkIsUUFBUSxFQUFFLG9CQUFvQjtJQUM5QixJQUFJLEVBQUUsYUFBYTtJQUNuQixhQUFhLEVBQUUsYUFBYTtJQUM1QixHQUFHLEVBQUUsZUFBZTtJQUNwQixFQUFFLEVBQUUsZUFBZTtJQUNuQixNQUFNLEVBQUUsZUFBZTtJQUN2QixFQUFFLEVBQUUsYUFBYTtJQUNqQixJQUFJLEVBQUUsYUFBYTtJQUNuQixJQUFJLEVBQUUsYUFBYTtJQUNuQixJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsYUFBYTtJQUNuQixFQUFFLEVBQUUsV0FBVztJQUNmLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLEdBQUcsRUFBRSxVQUFVO0lBQ2YsSUFBSSxFQUFFLGFBQWE7SUFDbkIsR0FBRyxFQUFFLGFBQWE7Q0FDbkIsQ0FBQTtBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxTQUFpQjtJQUNqRCxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ25DLElBQUksTUFBTSxHQUFHLFVBQVUsU0FBUyxFQUFFLENBQUE7SUFDbEMsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDeEMsTUFBTSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFBO0tBQ3RDO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQWE7SUFDN0MsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMzQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUE7SUFDdkUsSUFBSSxTQUFpQixDQUFBO0lBQ3JCLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNqQixTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3RCO1NBQU07UUFDTCxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0tBQ3JEO0lBQ0QsT0FBTyxTQUFTLENBQUE7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNjb3Blc0J5RmVuY2VOYW1lID0ge1xyXG4gIGJhc2g6IFwic291cmNlLnNoZWxsXCIsXHJcbiAgc2g6IFwic291cmNlLnNoZWxsXCIsXHJcbiAgcG93ZXJzaGVsbDogXCJzb3VyY2UucG93ZXJzaGVsbFwiLFxyXG4gIHBzMTogXCJzb3VyY2UucG93ZXJzaGVsbFwiLFxyXG4gIGM6IFwic291cmNlLmNcIixcclxuICBcImMrK1wiOiBcInNvdXJjZS5jcHBcIixcclxuICBjcHA6IFwic291cmNlLmNwcFwiLFxyXG4gIGNvZmZlZTogXCJzb3VyY2UuY29mZmVlXCIsXHJcbiAgXCJjb2ZmZWUtc2NyaXB0XCI6IFwic291cmNlLmNvZmZlZVwiLFxyXG4gIGNvZmZlZXNjcmlwdDogXCJzb3VyY2UuY29mZmVlXCIsXHJcbiAgY3M6IFwic291cmNlLmNzXCIsXHJcbiAgY3NoYXJwOiBcInNvdXJjZS5jc1wiLFxyXG4gIGNzczogXCJzb3VyY2UuY3NzXCIsXHJcbiAgc2FzczogXCJzb3VyY2Uuc2Fzc1wiLFxyXG4gIHNjc3M6IFwic291cmNlLmNzcy5zY3NzXCIsXHJcbiAgZXJsYW5nOiBcInNvdXJjZS5lcmxcIixcclxuICBnbzogXCJzb3VyY2UuZ29cIixcclxuICBodG1sOiBcInRleHQuaHRtbC5iYXNpY1wiLFxyXG4gIGphdmE6IFwic291cmNlLmphdmFcIixcclxuICBqYXZhc2NyaXB0OiBcInNvdXJjZS5qc1wiLFxyXG4gIGpzOiBcInNvdXJjZS5qc1wiLFxyXG4gIGpzb246IFwic291cmNlLmpzb25cIixcclxuICBsZXNzOiBcInNvdXJjZS5sZXNzXCIsXHJcbiAgbXVzdGFjaGU6IFwidGV4dC5odG1sLm11c3RhY2hlXCIsXHJcbiAgb2JqYzogXCJzb3VyY2Uub2JqY1wiLFxyXG4gIFwib2JqZWN0aXZlLWNcIjogXCJzb3VyY2Uub2JqY1wiLFxyXG4gIHBocDogXCJ0ZXh0Lmh0bWwucGhwXCIsXHJcbiAgcHk6IFwic291cmNlLnB5dGhvblwiLFxyXG4gIHB5dGhvbjogXCJzb3VyY2UucHl0aG9uXCIsXHJcbiAgcmI6IFwic291cmNlLnJ1YnlcIixcclxuICBydWJ5OiBcInNvdXJjZS5ydWJ5XCIsXHJcbiAgcnVzdDogXCJzb3VyY2UucnVzdFwiLFxyXG4gIHRleHQ6IFwidGV4dC5wbGFpblwiLFxyXG4gIHRvbWw6IFwic291cmNlLnRvbWxcIixcclxuICB0czogXCJzb3VyY2UudHNcIixcclxuICB0eXBlc2NyaXB0OiBcInNvdXJjZS50c1wiLFxyXG4gIHhtbDogXCJ0ZXh0LnhtbFwiLFxyXG4gIHlhbWw6IFwic291cmNlLnlhbWxcIixcclxuICB5bWw6IFwic291cmNlLnlhbWxcIixcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNjb3BlRm9yRmVuY2VOYW1lKGZlbmNlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICBmZW5jZU5hbWUgPSBmZW5jZU5hbWUudG9Mb3dlckNhc2UoKVxyXG4gIGxldCByZXN1bHQgPSBgc291cmNlLiR7ZmVuY2VOYW1lfWBcclxuICBpZiAoc2NvcGVzQnlGZW5jZU5hbWVbZmVuY2VOYW1lXSAhPSBudWxsKSB7XHJcbiAgICByZXN1bHQgPSBzY29wZXNCeUZlbmNlTmFtZVtmZW5jZU5hbWVdXHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZlbmNlTmFtZUZvclNjb3BlKHNjb3BlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHNjb3BlID0gc2NvcGUudG9Mb3dlckNhc2UoKVxyXG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5rZXlzKHNjb3Blc0J5RmVuY2VOYW1lKS5maWx0ZXIoKHMpID0+IHMgPT0gc2NvcGUpXHJcbiAgbGV0IHJlc3VsdE91dDogc3RyaW5nXHJcbiAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcclxuICAgIHJlc3VsdE91dCA9IHJlc3VsdFswXVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXN1bHRPdXQgPSBzY29wZS5zdWJzdHIoc2NvcGUubGFzdEluZGV4T2YoXCIuXCIpICsgMSlcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdE91dFxyXG59XHJcbiJdfQ==